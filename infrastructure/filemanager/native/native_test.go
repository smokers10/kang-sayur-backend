package native

import (
	"fmt"
	"kang-sayur-backend/infrastructure/filemanager"
	"testing"

	"github.com/stretchr/testify/assert"
)

var encoded = ""

func TestUpload(t *testing.T) {
	fd := filemanager.FileData{
		Base64:   encoded,
		Format:   "jpeg",
		Filename: "test",
		Path:     "../../public/test",
	}

	path, err := NativeFM().Upload(&fd)

	assert.Empty(t, err)
	assert.NotEmpty(t, path)
	fmt.Println(path)
}

func TestRemove(t *testing.T) {
	err := NativeFM().Remove("../../public/test/test.jpeg")

	assert.Empty(t, err)
}
